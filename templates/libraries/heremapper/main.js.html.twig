<script  type="text/javascript" charset="UTF-8" >
    /**
    * Display clustered markers on a map
    *
    * Note that the maps clustering module http://js.api.here.com/v3/3.0/mapsjs-clustering.js
    * must be loaded to use the Clustering

    * @param {H.Map} map A HERE Map instance within the application
    * @param {Array.<Object>} data Raw data that contains airports' coordinates
    */
    function startClustering(map, ui, getBubbleContent) {
        // First we need to create an array of DataPoint objects,
        // for the ClusterProvider
        var dataPoints = [{% for node in nodes %}new H.clustering.DataPoint({{node.latitude}}, {{node.longitude}},null,['{% if node.files[0] is defined %}{{node.files[0].url}}{% endif %}','{{node.title}}','{{node.location}}','{{node.category.categorygroup.url}}{{node.category.url}}/{{node.systemtitle}}','{{node.status}}']),{% endfor %}];

        // Create a clustering provider with custom options for clusterizing the input
        var clusteredDataProvider = new H.clustering.Provider(dataPoints, {
            clusteringOptions: {
                // Maximum radius of the neighbourhood
                eps: 5,
                // minimum weight of points required to form a cluster
                minWeight: 2
            },
            theme: CUSTOM_THEME
        });
        // Note that we attach the event listener to the cluster provider, and not to
        // the individual markers
        clusteredDataProvider.addEventListener('tap', onMarkerClick);
        // Create a layer tha will consume objects from our clustering provider
        var clusteringLayer = new H.map.layer.ObjectLayer(clusteredDataProvider);

        // To make objects from clustering provder visible,
        // we need to add our layer to the map
        map.addLayer(clusteringLayer);
    }

    // Custom clustering theme description object.
    // Object should implement H.clustering.ITheme interface
    var CUSTOM_THEME = {
        getClusterPresentation: function(cluster) {
            // Get random DataPoint from our cluster
            var randomDataPoint = getRandomDataPoint(cluster),
            // Get a reference to data object that DataPoint holds
            data = randomDataPoint.getData();
            var iconString = '';
            if (data[4] == 2)
            {
                iconString = '/assets/img/others/mapmarker-completed.png';
            }
            else
            {
                iconString = '/assets/img/others/mapmarker-inprogress.png';
            }
            // Create a marker from a random point in the cluster
            var clusterMarker = new H.map.Marker(cluster.getPosition(), {
                icon: new H.map.Icon(iconString, {
                    size: {w: 50, h: 50},
                    anchor: {x: 25, y: 25}
                }),

                // Set min/max zoom with values from the cluster,
                // otherwise clusters will be shown at all zoom levels:
                min: cluster.getMinZoom(),
                max: cluster.getMaxZoom()
            });

            // Link data from the random point from the cluster to the marker,
            // to make it accessible inside onMarkerClick
            clusterMarker.setData(data);

            return clusterMarker;
        },
        getNoisePresentation: function (noisePoint) {
            // Get a reference to data object our noise points
            var data = noisePoint.getData();
            var iconString = '';
            if (data[4] == 2)
            {
                iconString = '/assets/img/others/mapmarker-completed.png';
            }
            else
            {
                iconString = '/assets/img/others/mapmarker-inprogress.png';
            }
            // Create a marker for the noisePoint
            noiseMarker = new H.map.Marker(noisePoint.getPosition(), {
                // Use min zoom from a noise point
                // to show it correctly at certain zoom levels:
                min: noisePoint.getMinZoom(),
                icon: new H.map.Icon(iconString, {
                    size: {w: 50, h: 50},
                    anchor: {x: 25, y: 25}
                })
            });

            // Link a data from the point to the marker
            // to make it accessible inside onMarkerClick
            noiseMarker.setData(data);

            return noiseMarker;
        }
    };

    /**
     * Boilerplate map initialization code starts below:
     */
    /**
    * Boilerplate map initialization code starts below:
    */
    // Helper function for getting a random point from a cluster object
    function getRandomDataPoint(cluster) {
        var dataPoints = [];

        // Iterate through all points which fall into the cluster and store references to them
        cluster.forEachDataPoint(dataPoints.push.bind(dataPoints));

        // Randomly pick an index from [0, dataPoints.length) range
        // Note how we use bitwise OR ("|") operator for that instead of Math.floor
        return dataPoints[Math.random() * dataPoints.length | 0];
    }
    
    /**
    * CLICK/TAP event handler for our markers. That marker can represent either a single photo or
    * a cluster (group of photos)
    * @param {H.mapevents.Event} e The event object
    */
   function onMarkerClick(e) {
        // Get position of the "clicked" marker
        var position = e.target.getPosition(),
            // Get the data associated with that marker
            data = e.target.getData(),
            // Merge default template with the data and get HTML
            bubbleContent = getBubbleContent(data),
            bubble = onMarkerClick.bubble;

        // For all markers create only one bubble, if not created yet
        if (!bubble) {
            bubble = new H.ui.InfoBubble(position, {
              content: bubbleContent
            });
            ui.addBubble(bubble);
            // Cache the bubble object
            onMarkerClick.bubble = bubble;
        } else {
            // Reuse existing bubble object
            bubble.setPosition(position);
            bubble.setContent(bubbleContent);
            bubble.open();
        }

        // Move map's center to a clicked marker
        map.setCenter(position, true);
   }


    // Step 1: initialize communication with the platform
    var platform = new H.service.Platform({
        app_id: 'LGcmCQ76osKVojBa2DkY',
        app_code: 'CBIweNpu96F1PDB9Ox0sRA',
        useHTTPS: true
    });
    var pixelRatio = window.devicePixelRatio || 1;
    var defaultLayers = platform.createDefaultLayers({
        tileSize: pixelRatio === 1 ? 256 : 512,
        ppi: pixelRatio === 1 ? undefined : 320
    });

    // Step 2: initialize a map
    var map = new H.Map(document.getElementById('mapContainer'), defaultLayers.normal.map, {
        center: new H.geo.Point(39.7684,-86.1581),
        zoom: 10,
        pixelRatio: pixelRatio,
        noWrap: true
    });

    // Step 3: make the map interactive
    // MapEvents enables the event system
    // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));


    // Step 4: create the default UI component, for displaying bubbles
    var ui = H.ui.UI.createDefault(map, defaultLayers);

    /**
    * Merges given data with default bubble template and returns resulting HTML string
    * @param {Object} data Data holding single picture information
    */
    function getBubbleContent(data) {
        var iconString = '';
        if (data[4] == 2)
        {
            iconString = 'Status: Completed';
        }
        else
        {
            iconString = 'Status: In Progress';
        }
        return [
            '<div class="bubble">',
                '<img class="img-responsive" width="150px" src="',
                 data[0],
                 '" alt="', data[1], '" />',
                '</a>',
                '<span>',
                    '<hr/>',
                    '<p class="bubble-footer"',
                        '',
                        '<span class="bubble-desc">',
                            '<a href="',data[3],'">',
                            data[1],
                            '</a>',
                            '<hr />',
                            '<p>',
                            iconString,
                            '</p>',
                            '<p>',
                            data[2],
                            '</p>',
                        '</span>',
                    '</p>',
                '</span>',
            '</div>'
        ].join('');
    }

    // Step 5: request a data about airports's coordinates
    startClustering(map, ui, getBubbleContent);
    $(".H_btn:contains('Traffic conditions')").hide();
    $(".H_btn:contains('Public transport')").hide();
    $(".H_btn:contains('Show traffic incidents')").hide();
  </script>